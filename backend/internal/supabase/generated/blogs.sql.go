// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: blogs.sql

package supabase

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO blog_posts (id, title, slug, tags, created_by)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, title, slug, tags, created_at, created_by
`

type CreatePostParams struct {
	ID        pgtype.UUID
	Title     string
	Slug      string
	Tags      []string
	CreatedBy string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (BlogPost, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Slug,
		arg.Tags,
		arg.CreatedBy,
	)
	var i BlogPost
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Tags,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const listPaginatedPosts = `-- name: ListPaginatedPosts :many
SELECT id, title, slug, tags, created_at, created_by FROM blog_posts
ORDER BY created_at DESC
    LIMIT $1 OFFSET $2
`

type ListPaginatedPostsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPaginatedPosts(ctx context.Context, arg ListPaginatedPostsParams) ([]BlogPost, error) {
	rows, err := q.db.Query(ctx, listPaginatedPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogPost
	for rows.Next() {
		var i BlogPost
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Tags,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
